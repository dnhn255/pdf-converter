"""Pdf converter is a simple tool that allows to upload any PDF file and extract plain text
(picture-based files included) in a specified folder. It uses OCR tesseract, which is able to
recognize and read the text embedded in images."""

import sys
import json

# classes from three other modules
from ui import Ui_Dialog
from engine import Engine
from settings import CreateNewJson

# pyqt libraries to control the UI
from PyQt5.QtWidgets import QMainWindow
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QFileDialog

# error handler's
ERROR_MSG_1 = "Bad filename or not a pdf file."
ERROR_MSG_2 = "Json file does not exist."


class UiWindow(QMainWindow, Ui_Dialog):
    """Call ui generated by QT Designer"""

    def __init__(self, *args, **kwargs):
        """UI's initializer"""
        super(UiWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)
        self.setFixedSize(662, 398)


class WindowControls:
    """Control of the ui"""

    def __init__(self, view):
        """Controller's initializer"""
        self._view = view
        self.display_default_settings()
        self._connect_signals()

    def get_filename(self, btn_name):
        """Ask user to specify the file and display them in lineEdits"""
        if btn_name == "button_file":
            file = QFileDialog.getOpenFileName(None, "Select output file")
            self._view.line_edit_file.setText(file[0])
        elif btn_name == "button_folder":
            file = QFileDialog.getExistingDirectory(None, "Select output file")
            self._view.line_edit_folder.setText(file)
        elif btn_name == "button_pytesseract":
            file = QFileDialog.getExistingDirectory(None, "Select output file")
            self._view.line_edit_pytesseract.setText(file)
        elif btn_name == "button_poppler":
            file = QFileDialog.getOpenFileName(None, "Select output file")
            self._view.line_edit_poppler.setText(file[0])

    def clear_filename(self):
        """Allow user to clear all important lineEdits"""
        self._view.line_edit_file.setText("")
        self._view.line_edit_folder.setText("")
        self._view.line_edit_filename.setText("")
        self._view.label_status.setText("Status: -")

    def launch_converter(self):
        """Control of the [RUN] button, which calls the engine module that handles the conversion"""
        self._view.label_status.setText("In progress. Please wait.")
        QApplication.processEvents()  # allows to display change in the status bar
        try:
            if not self._view.line_edit_file.text():
                print("Did not select file to convert!")
            elif not self._view.line_edit_folder.text():
                print("Did not select output folder!")
            else:
                text_name = (
                    "output_file"
                    if self._view.line_edit_filename.text() == ""
                    else self._view.line_edit_filename.text()
                )  # name the file as default or take user's input
                Engine(
                    file_to_convert=self._view.line_edit_file.text(),
                    output_folder=self._view.line_edit_folder.text(),
                    output_text=text_name,
                )
                self._view.label_status.setText("File converted")
        except Exception:
            self._view.label_status.setText("Status: ERR")
            print(ERROR_MSG_1)

    def update_settings(self):
        """Settings tab, update const filepath to pytesseract and poppler"""
        poppler = self._view.line_edit_poppler.text()
        pytesseract = self._view.line_edit_pytesseract.text()
        CreateNewJson(poppler=poppler, pytesseract=pytesseract)
        print("Poppler and pytesseract have been successfully saved.")

    def display_default_settings(self):
        """Check json file and display const filepath to poppler and pytesseract"""
        try:
            with open("settings.json") as json_file:
                data = json.load(json_file)
                for p in data["settings"]:
                    self._view.line_edit_poppler.setText(p["poppler"])
                    self._view.line_edit_pytesseract.setText(p["pytesseract"])
        except FileNotFoundError:
            print(ERROR_MSG_2)

    def _connect_signals(self):
        """Connect all program's functions to be launched in the application"""
        self._view.button_file.clicked.connect(lambda: self.get_filename("button_file"))
        self._view.button_folder.clicked.connect(lambda: self.get_filename("button_folder"))
        self._view.button_clear.clicked.connect(lambda: self.clear_filename())
        self._view.button_run.clicked.connect(self.launch_converter)
        self._view.apply_settings.clicked.connect(lambda: self.update_settings())
        self._view.button_pytesseract.clicked.connect(lambda: self.get_filename("button_pytesseract"))
        self._view.button_poppler.clicked.connect(lambda: self.get_filename("button_poppler"))


if __name__ == "__main__":
    app = QApplication(sys.argv)
    view = UiWindow()
    view.show()
    WindowControls(view=view)
    sys.exit(app.exec_())
